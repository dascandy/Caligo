#include <catch/catch.hpp>
#include <caligo/aes.h>

TEST_CASE("aes 128", "[AES]") {
  s2::vector<uint8_t> plaintext = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
  s2::vector<uint8_t> key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
  s2::vector<uint8_t> ct_test = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
  AesKeySchedule<128> sched(key);

  __m128i block = AesEncrypt(sched, _mm_loadu_si128((__m128i*)plaintext.data()));

  s2::vector<uint8_t> ct;
  ct.resize(16);
  _mm_storeu_si128((__m128i*)ct.data(), block);
  REQUIRE(ct == ct_test);
}

TEST_CASE("aes 256", "[AES]") {
  s2::vector<uint8_t> plaintext = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
  s2::vector<uint8_t> key = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
  s2::vector<uint8_t> ct_test = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89, };
  AesKeySchedule<256> sched(key);

  __m128i block = AesEncrypt(sched, _mm_loadu_si128((__m128i*)plaintext.data()));

  s2::vector<uint8_t> ct;
  ct.resize(16);
  _mm_storeu_si128((__m128i*)ct.data(), block);
  REQUIRE(ct == ct_test);
}




